package input

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
)

type Type string

const (
	TypeText     Type = "text"
	TypePassword Type = "password"
	TypeEmail    Type = "email"
	TypeNumber   Type = "number"
	TypeTel      Type = "tel"
	TypeURL      Type = "url"
	TypeSearch   Type = "search"
	TypeDate     Type = "date"
	TypeTime     Type = "time"
	TypeFile     Type = "file"
)

type Props struct {
	ID               string
	Class            string
	Attributes       templ.Attributes
	Name             string
	Type             Type
	Placeholder      string
	Value            string
	Disabled         bool
	Readonly         bool
	Required         bool
	FileAccept       string
	HasError         bool
	NoTogglePassword bool
}

templ Input(props ...Props) {
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	if p.Type == "" {
		{{ p.Type = TypeText }}
	}
	if p.Type == TypePassword && !p.NoTogglePassword {
		@Script()
	}
	<div class="relative w-full">
		<input
			if p.ID != "" {
				id={ p.ID }
			}
			type={ string(p.Type) }
			if p.Name != "" {
				name={ p.Name }
			}
			if p.Placeholder != "" {
				placeholder={ p.Placeholder }
			}
			if p.Value != "" {
				value={ p.Value }
			}
			if p.Type == TypeFile && p.FileAccept != "" {
				accept={ p.FileAccept }
			}
			disabled?={ p.Disabled }
			readonly?={ p.Readonly }
			required?={ p.Required }
			class={
				util.TwMerge(
					"peer flex h-10 w-full px-3 py-2",
					"rounded-md border border-input bg-background text-sm ring-offset-background",
					"file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground",
					"placeholder:text-muted-foreground",
					"focus-visible:outline-hidden focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
					"disabled:cursor-not-allowed disabled:opacity-50",
					util.If(p.HasError, "border-destructive ring-destructive"),
					util.If(p.Type == TypePassword && !p.NoTogglePassword, "pr-8"),
					p.Class,
				),
			}
			{ p.Attributes... }
		/>
		if p.Type == TypePassword && !p.NoTogglePassword {
			@button.Button(button.Props{
				Size:       button.SizeIcon,
				Variant:    button.VariantGhost,
				Class:      "absolute right-0 top-1/2 -translate-y-1/2 transition-opacity duration-200 opacity-0 pointer-events-none cursor-pointer",
				Attributes: templ.Attributes{"data-toggle-password": p.ID},
			}) {
				<span class="icon-open block">
					@icon.Eye()
				</span>
				<span class="icon-closed hidden">
					@icon.EyeOff()
				</span>
			}
		}
	</div>
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script nonce={ templ.GetNonce(ctx) }>
		(function() { // IIFE Start

            function initPasswordToggles(root = document) {
                const buttons = root.querySelectorAll('[data-toggle-password]');
                buttons.forEach(function (button) {
                    button.removeEventListener('click', togglePassword);
                    button.addEventListener('click', togglePassword);
                    const inputId = button.getAttribute('data-toggle-password');
                    const input = document.getElementById(inputId);

                    if (input) {
                        updateButtonVisibility(input, button);
                        input.removeEventListener('input', handleInputChange);
                        input.addEventListener('input', handleInputChange);
                    }
                });
            }

            function togglePassword(event) {
                const button = event.currentTarget;
                const inputId = button.getAttribute('data-toggle-password');
                const input = document.getElementById(inputId);
                if (input) {
                    const iconOpen = button.querySelector('.icon-open');
                    const iconClosed = button.querySelector('.icon-closed');

                    if (input.type === 'password') {
                        input.type = 'text';
                        iconOpen.classList.add('hidden');
                        iconClosed.classList.remove('hidden');
                    } else {
                        input.type = 'password';
                        iconOpen.classList.remove('hidden');
                        iconClosed.classList.add('hidden');
                    }
                }
            }

            function handleInputChange(event) {
                const input = event.target;
                const button = document.querySelector('[data-toggle-password="' + input.id + '"]');
                if (button) {
                    updateButtonVisibility(input, button);
                }
            }

            function updateButtonVisibility(input, button) {
                if (input.value.trim() == "") {
                    button.classList.add('opacity-0');
                    button.classList.add('pointer-events-none');
                    button.classList.remove('opacity-50');
                    button.setAttribute('tabindex', '-1');
                } else {
                    button.classList.remove('opacity-0');
                    button.classList.remove('pointer-events-none');
                    button.classList.add('opacity-50');
                    button.setAttribute('tabindex', '0');
                }
            }

            const handleHtmxSwap = (event) => {
                const target = event.detail.target || event.target;
                if (target instanceof Element) {
                    requestAnimationFrame(() => initPasswordToggles());
                }
            };

            if (!window.templuiPasswordToggleBtnInitialized) {
                window.templuiPasswordToggleBtnInitialized = true;
                initPasswordToggles(document.currentScript?.parentNode || document);
                document.addEventListener('DOMContentLoaded', () => initPasswordToggles());
                document.body.addEventListener('htmx:afterSwap', handleHtmxSwap);
                document.body.addEventListener('htmx:oobAfterSwap', handleHtmxSwap);
            }
         })(); // IIFE End
        </script>
	}
}
