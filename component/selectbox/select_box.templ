package selectbox

import (
	"github.com/axzilla/templui/component/button"
	"github.com/axzilla/templui/icon"
	"github.com/axzilla/templui/util"
	"strconv"
)

type Props struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type TriggerProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Name       string
	Required   bool
	Disabled   bool
	HasError   bool
}

type ValueProps struct {
	ID          string
	Class       string
	Attributes  templ.Attributes
	Placeholder string
}

type ContentProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type GroupProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type LabelProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
}

type ItemProps struct {
	ID         string
	Class      string
	Attributes templ.Attributes
	Value      string
	Selected   bool
	Disabled   bool
}

templ SelectBox(props ...Props) {
	@Script()
	{{ var p Props }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID + "-container" }
		}
		class={ util.TwMerge("w-full select-container relative", p.Class) }
		data-select-id={ p.ID }
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Trigger(props ...TriggerProps) {
	{{ var p TriggerProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	@button.Button(button.Props{
		ID:      p.ID,
		Type:    "button",
		Variant: button.VariantOutline,
		Class: util.TwMerge(
			"w-full select-trigger flex items-center justify-between focus:ring-2 focus:ring-offset-2",
			util.If(p.HasError, "border-destructive ring-destructive"),
			p.Class,
		),
		Disabled: p.Disabled,
		Attributes: util.MergeAttributes(
			templ.Attributes{
				"aria-haspopup":       "listbox",
				"aria-expanded":       "false",
				"data-select-trigger": "true",
				"tabindex":            "0",
				"required":            strconv.FormatBool(p.Required),
			},
			p.Attributes,
		),
	}) {
		<input
			type="hidden"
			if p.Name != "" {
				name={ p.Name }
			}
			required?={ p.Required }
		/>
		{ children... }
		<span class="pointer-events-none ml-1">
			@icon.ChevronDown(icon.Props{
				Size:  16,
				Class: "text-muted-foreground",
			})
		</span>
	}
}

templ Value(props ...ValueProps) {
	{{ var p ValueProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("block truncate select-value text-muted-foreground", p.Class) }
		{ p.Attributes... }
	>
		if p.Placeholder != "" {
			{ p.Placeholder }
		}
		{ children... }
	</span>
}

templ Content(props ...ContentProps) {
	{{ var p ContentProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			util.TwMerge(
				"p-1 select-content absolute z-50 w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md",
				"transition-all ease-out duration-100",
				"transform opacity-0 -translate-y-1 scale-95 hidden",
				p.Class,
			),
		}
		role="listbox"
		tabindex="-1"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Group(props ...GroupProps) {
	{{ var p GroupProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("p-1", p.Class) }
		role="group"
		{ p.Attributes... }
	>
		{ children... }
	</div>
}

templ Label(props ...LabelProps) {
	{{ var p LabelProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<span
		if p.ID != "" {
			id={ p.ID }
		}
		class={ util.TwMerge("px-2 py-1.5 text-sm font-medium", p.Class) }
		{ p.Attributes... }
	>
		{ children... }
	</span>
}

templ Item(props ...ItemProps) {
	{{ var p ItemProps }}
	if len(props) > 0 {
		{{ p = props[0] }}
	}
	<div
		if p.ID != "" {
			id={ p.ID }
		}
		class={
			util.TwMerge(
				"select-item relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 px-2 text-sm font-light outline-none",
				"hover:bg-accent hover:text-accent-foreground",
				"focus:bg-accent focus:text-accent-foreground",
				util.If(p.Selected, "bg-accent text-accent-foreground"),
				util.If(p.Disabled, "pointer-events-none opacity-50"),
				p.Class,
			),
		}
		role="option"
		data-value={ p.Value }
		data-selected={ strconv.FormatBool(p.Selected) }
		data-disabled={ strconv.FormatBool(p.Disabled) }
		tabindex="0"
		{ p.Attributes... }
	>
		<span class="truncate select-item-text">
			{ children... }
		</span>
		<span
			class={
				util.TwMerge(
					"select-check absolute right-2 flex h-3.5 w-3.5 items-center justify-center",
					util.IfElse(p.Selected, "opacity-100", "opacity-0"),
				),
			}
		>
			@icon.Check(icon.Props{Size: 16})
		</span>
	</div>
}

var handle = templ.NewOnceHandle()

templ Script() {
	@handle.Once() {
		<script defer nonce={ templ.GetNonce(ctx) }>
			(function() { // IIFE
				function positionDropdown(trigger, content) {
					const triggerRect = trigger.getBoundingClientRect();
					const viewportHeight = window.innerHeight;
					const viewportWidth = window.innerWidth;
					
					content.style.display = 'block';
					content.style.visibility = 'hidden';
					content.style.maxHeight = '';
					
					// Force reflow
					void content.offsetHeight;
					
					const contentHeight = content.scrollHeight;
					const contentWidth = content.scrollWidth;
					
					const spaceBelow = viewportHeight - triggerRect.bottom;
					const spaceAbove = triggerRect.top;
					const spaceRight = viewportWidth - triggerRect.left;
					
					content.style.visibility = '';
					
					// Position vertically
					if (spaceBelow >= contentHeight) {
						// Enough space below
						content.style.top = '100%';
						content.style.bottom = 'auto';
						content.style.marginTop = '0.25rem';
						content.style.marginBottom = '0';
						content.style.maxHeight = `${spaceBelow - 10}px`;
					} else if (spaceAbove >= contentHeight) {
						// Enough space above
						content.style.bottom = '100%';
						content.style.top = 'auto';
						content.style.marginBottom = '0.25rem';
						content.style.marginTop = '0';
						content.style.maxHeight = `${spaceAbove - 10}px`;
					} else {
						// Limited space - choose the larger area and add scrolling
						if (spaceBelow >= spaceAbove) {
							content.style.top = '100%';
							content.style.bottom = 'auto';
							content.style.marginTop = '0.25rem';
							content.style.marginBottom = '0';
							content.style.maxHeight = `${spaceBelow - 10}px`;
						} else {
							content.style.bottom = '100%';
							content.style.top = 'auto';
							content.style.marginBottom = '0.25rem';
							content.style.marginTop = '0';
							content.style.maxHeight = `${spaceAbove - 10}px`;
						}
						content.style.overflowY = 'auto';
					}
					
					// Position horizontally
					if (contentWidth > triggerRect.width && contentWidth > spaceRight) {
						content.style.right = '0';
						content.style.left = 'auto';
					} else {
						content.style.left = '0';
						content.style.right = 'auto';
					}
				}

				function initSelect(container) {
					// Skip if already initialized
					if (!container || container.hasAttribute('data-initialized')) {
						return;
					}
					
					// Mark as initialized
					container.setAttribute('data-initialized', 'true');
					
					// Find required elements
					const trigger = container.querySelector('button.select-trigger');
					const content = container.querySelector('.select-content');
					const valueEl = container.querySelector('.select-value');
					const hiddenInput = container.querySelector('input[type="hidden"]');
					
					// Exit if critical elements are missing
					if (!trigger || !content) {
						console.error('Select box missing required elements', container);
						return;
					}
					
					// State variables
					let isOpen = false;
					
					// Find selected item or highlight first item
					const selectedItem = container.querySelector('.select-item[data-selected="true"]');
					
					// If no item is selected, mark first as visually highlighted
					if (!selectedItem) {
						const firstItem = container.querySelector('.select-item');
						if (firstItem) {
							firstItem.classList.add('bg-muted');
						}
					}
					
					// Initialize values if item is selected
					if (selectedItem && valueEl) {
						const itemText = selectedItem.querySelector('.select-item-text');
						if (itemText) {
							valueEl.textContent = itemText.textContent;
							valueEl.classList.remove('text-muted-foreground');
						}
						if (hiddenInput) {
							hiddenInput.value = selectedItem.getAttribute('data-value');
						}
					}
					
					// Toggle dropdown open/closed
					function toggleDropdown() {
						isOpen = !isOpen;
						trigger.setAttribute('aria-expanded', String(isOpen));
						
						if (isOpen) {
							// Open dropdown
							positionDropdown(trigger, content);
							content.style.display = 'block';
							
							// Force reflow then animate
							void content.offsetHeight;
							content.classList.remove('opacity-0', '-translate-y-1', 'scale-95');
							content.classList.add('opacity-100', 'translate-y-0', 'scale-100');
						} else {
							// Close dropdown with animation
							content.classList.remove('opacity-100', 'translate-y-0', 'scale-100');
							content.classList.add('opacity-0', '-translate-y-1', 'scale-95');
							
							// Hide after animation completes
							setTimeout(() => {
								if (!isOpen) {
									content.style.display = 'none';
								}
							}, 100);
							
							// Reset focus
							trigger.style.outline = '';
							trigger.style.boxShadow = '';
							trigger.focus();
						}
					}
					
					// Reset hover effects, restore selected item styling
					function resetItemStyles() {
						container.querySelectorAll('.select-item').forEach(item => {
							if (item.getAttribute('data-selected') === 'true') {
								item.classList.add('bg-accent', 'text-accent-foreground');
								item.classList.remove('bg-muted');
							} else {
								item.classList.remove('bg-accent', 'text-accent-foreground', 'bg-muted');
							}
						});
					}
					
					// Select an item
					function selectItem(item) {
						if (item.getAttribute('data-disabled') === 'true') return;
						
						const value = item.getAttribute('data-value');
						const itemText = item.querySelector('.select-item-text');
						
						// Reset all items
						container.querySelectorAll('.select-item').forEach(el => {
							el.setAttribute('data-selected', 'false');
							el.classList.remove('bg-accent', 'text-accent-foreground', 'bg-muted');
							
							const check = el.querySelector('.select-check');
							if (check) {
								check.classList.replace('opacity-100', 'opacity-0');
							}
						});
						
						// Mark new selection
						item.setAttribute('data-selected', 'true');
						item.classList.add('bg-accent', 'text-accent-foreground');
						
						const check = item.querySelector('.select-check');
						if (check) {
							check.classList.replace('opacity-0', 'opacity-100');
						}
						
						// Update display value
						if (valueEl && itemText) {
							valueEl.textContent = itemText.textContent;
							valueEl.classList.remove('text-muted-foreground');
						}
						
						// Update hidden input & trigger change event
						if (hiddenInput && value) {
							hiddenInput.value = value;
							hiddenInput.dispatchEvent(new Event('change', {bubbles: true}));
						}
						
						// Close dropdown
						toggleDropdown();
					}
					
					// Event: Trigger click
					trigger.addEventListener('mousedown', e => {
						if (e.button === 0) {
							e.currentTarget.style.outline = 'none';
							e.currentTarget.style.boxShadow = 'none';
						}
					});
					
					trigger.addEventListener('click', e => {
						if (e.currentTarget.disabled) return;
						toggleDropdown();
					});
					
					// Event: Keyboard navigation
					trigger.addEventListener('keydown', e => {
						if ((e.key === 'Enter' || e.key === ' ') && !e.currentTarget.disabled) {
							e.preventDefault();
							toggleDropdown();
						} else if ((e.key === 'Escape' || e.key === 'Tab') && isOpen) {
							e.preventDefault();
							toggleDropdown();
						}
					});
					
					// Event: Mouse hover on items
					content.addEventListener('mouseover', e => {
						const item = e.target.closest('.select-item');
						if (!item || item.getAttribute('data-disabled') === 'true') return;
						
						container.querySelectorAll('.select-item').forEach(el => {
							el.classList.remove('bg-accent', 'text-accent-foreground', 'bg-muted');
						});
						
						item.classList.add('bg-accent', 'text-accent-foreground');
					});
					
					content.addEventListener('mouseleave', resetItemStyles);
					
					// Event: Item selection
					container.querySelectorAll('.select-item').forEach(item => {
						item.addEventListener('click', () => selectItem(item));
						
						item.addEventListener('keydown', e => {
							if (e.key === 'Enter' || e.key === ' ') {
								e.preventDefault();
								selectItem(item);
							}
						});
					});
					
					// Event: Outside click
					document.addEventListener('click', e => {
						if (isOpen && !container.contains(e.target)) {
							toggleDropdown();
						}
					});
				}
				
				function initAllComponents(root = document) {
					if (root instanceof Element && root.matches('.select-container')) {
						initSelect(root);
					}
					for (const select of root.querySelectorAll('.select-container:not([data-initialized])')) {
						initSelect(select);
					}
				}
				
				const handleHtmxSwap = (event) => {
					const target = event.detail.target || event.target;
					if (target instanceof Element) {
						setTimeout(() => initAllComponents(target), 0);
					}
				};
				
				document.addEventListener('DOMContentLoaded', () => initAllComponents());
				document.body.addEventListener('htmx:afterSwap', handleHtmxSwap);
				document.body.addEventListener('htmx:oobAfterSwap', handleHtmxSwap);
			})(); // End of IIFE
		</script>
	}
}
